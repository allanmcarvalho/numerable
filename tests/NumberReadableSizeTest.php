<?php

use Numerable\Number;
use Numerable\Numerable;

it('can do a simple format', function () {
    expect(Number::toReadableSize(1024))
        ->toBeString()
        ->toEqual('1KB');
});

it('can do a simple format using helper', function () {
    expect(num()->toReadableSize(1024))
        ->toBeString()
        ->toEqual('1KB');
});

it('can format with bytes', function () {
    expect(num(1)->toReadableSize())
        ->toBeString()
        ->toEqual('1B')
        ->and(num(1)->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 byte')
        ->and(num(0.5)->toReadableSize())
        ->toBeString()
        ->toEqual('0.5B')
        ->and(num(0.5)->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('0.5 bytes')
        ->and(num(512)->toReadableSize())
        ->toBeString()
        ->toEqual('512B')
        ->and(num(512)->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 bytes')
        ->and(num(1023)->toReadableSize())
        ->toBeString()
        ->toEqual('1,023B')
        ->and(num(1023)->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 bytes')
        ->and(num(1024)->toReadableSize())
        ->not()
        ->toEqual('1,024B')
        ->and(num(1024)->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 bytes');
});

it('can format with kilobytes', function () {
    expect(num(1 * pow(1024, 1))->toReadableSize())
        ->toBeString()
        ->toEqual('1KB')
        ->and(num(1 * pow(1024, 1))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 kilobyte')
        ->and(num(512 * pow(1024, 1))->toReadableSize())
        ->toBeString()
        ->toEqual('512KB')
        ->and(num(512 * pow(1024, 1))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 kilobytes')
        ->and(num(1023 * pow(1024, 1))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023KB')
        ->and(num(1023 * pow(1024, 1))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 kilobytes')
        ->and(num(1024 * pow(1024, 1))->toReadableSize())
        ->not()
        ->toEqual('1,024KB')
        ->and(num(1024 * pow(1024, 1))->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 kilobytes');
});

it('can format with megabytes', function () {
    expect(num(1 * pow(1024, 2))->toReadableSize())
        ->toBeString()
        ->toEqual('1MB')
        ->and(num(1 * pow(1024, 2))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 megabyte')
        ->and(num(512 * pow(1024, 2))->toReadableSize())
        ->toBeString()
        ->toEqual('512MB')
        ->and(num(512 * pow(1024, 2))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 megabytes')
        ->and(num(1023 * pow(1024, 2))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023MB')
        ->and(num(1023 * pow(1024, 2))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 megabytes')
        ->and(num(1024 * pow(1024, 2))->toReadableSize())
        ->not()
        ->toEqual('1,024MB')
        ->and(num(1024 * pow(1024, 2))->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 megabytes');
});

it('can format with gigabytes', function () {
    expect(num(1 * pow(1024, 3))->toReadableSize())
        ->toBeString()
        ->toEqual('1GB')
        ->and(num(1 * pow(1024, 3))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 gigabyte')
        ->and(num(512 * pow(1024, 3))->toReadableSize())
        ->toBeString()
        ->toEqual('512GB')
        ->and(num(512 * pow(1024, 3))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 gigabytes')
        ->and(num(1023 * pow(1024, 3))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023GB')
        ->and(num(1023 * pow(1024, 3))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 gigabytes')
        ->and(num(1024 * pow(1024, 3))->toReadableSize())
        ->not()
        ->toEqual('1,024GB')
        ->and(num(1024 * pow(1024, 3))->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 gigabytes');
});

it('can format with terabytes', function () {
    expect(num(1 * pow(1024, 4))->toReadableSize())
        ->toBeString()
        ->toEqual('1TB')
        ->and(num(1 * pow(1024, 4))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 terabyte')
        ->and(num(512 * pow(1024, 4))->toReadableSize())
        ->toBeString()
        ->toEqual('512TB')
        ->and(num(512 * pow(1024, 4))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 terabytes')
        ->and(num(1023 * pow(1024, 4))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023TB')
        ->and(num(1023 * pow(1024, 4))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 terabytes')
        ->and(num(1024 * pow(1024, 4))->toReadableSize())
        ->not()
        ->toEqual('1,024TB')
        ->and(num(1024 * pow(1024, 4))->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 terabytes');
});

it('can format with petabytes', function () {
    expect(num(1 * pow(1024, 5))->toReadableSize())
        ->toBeString()
        ->toEqual('1PB')
        ->and(num(1 * pow(1024, 5))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 petabyte')
        ->and(num(512 * pow(1024, 5))->toReadableSize())
        ->toBeString()
        ->toEqual('512PB')
        ->and(num(512 * pow(1024, 5))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 petabytes')
        ->and(num(1023 * pow(1024, 5))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023PB')
        ->and(num(1023 * pow(1024, 5))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 petabytes')
        ->and(num(1024 * pow(1024, 5))->toReadableSize())
        ->not()
        ->toEqual('1,024PB')
        ->and(num(1024 * pow(1024, 5))->toReadableSize(short: false))
        ->toBeString()
        ->not()
        ->toEqual('1,024 petabytes');
});

it('can format with exabytes', function () {
    expect(num(1 * pow(1024, 6))->toReadableSize())
        ->toBeString()
        ->toEqual('1EB')
        ->and(num(1 * pow(1024, 6))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1 exabyte')
        ->and(num(512 * pow(1024, 6))->toReadableSize())
        ->toBeString()
        ->toEqual('512EB')
        ->and(num(512 * pow(1024, 6))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('512 exabytes')
        ->and(num(1023 * pow(1024, 6))->toReadableSize())
        ->toBeString()
        ->toEqual('1,023EB')
        ->and(num(1023 * pow(1024, 6))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,023 exabytes')
        ->and(num(1024 * pow(1024, 6))->toReadableSize())
        ->toEqual('1,024EB')
        ->and(num(1024 * pow(1024, 6))->toReadableSize(short: false))
        ->toBeString()
        ->toEqual('1,024 exabytes');
});
